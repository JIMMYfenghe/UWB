<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu May 19 17:51:40 2022
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; tx_main &rArr; max30102_test &rArr; maxim_heart_rate_and_oxygen_saturation &rArr; maxim_find_peaks &rArr; maxim_remove_close_peaks &rArr; maxim_sort_indices_descend
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[35]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[36]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[37]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[38]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[39]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from falldetection.o(i.EXTI1_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[1e]">EXTI9_5_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[41]">FPU_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[27]">I2C1_ER_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[26]">I2C1_EV_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[29]">I2C2_ER_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[28]">I2C2_EV_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[40]">I2C3_ER_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3f]">I2C3_EV_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3a]">OTG_FS_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[30]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2f]">RTC_Alarm_IRQHandler</a> from rtc_time.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[32]">SDIO_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2b]">SPI2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[34]">SPI3_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[42]">SPI4_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[1f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[22]">TIM1_CC_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[21]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[20]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[23]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[24]">TIM3_IRQHandler</a> from tx_main.o(i.TIM3_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[25]">TIM4_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[33]">TIM5_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2c]">USART1_IRQHandler</a> from port.o(i.USART1_IRQHandler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[2d]">USART2_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[3e]">USART6_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f401xx.o(.text) referenced from startup_stm32f401xx.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xx.o(.text)
 <LI><a href="#[47]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[46]">fputc</a> from port.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[43]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[48]">tx_rx_main</a> from tx_main.o(i.tx_rx_main) referenced from tx_main.o(i.tx_main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[49]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[160]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[161]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[162]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[163]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[164]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[165]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ppm
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_get_temp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ7_calibration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_calibration
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_get_temp
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ppm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ7_calibration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_calibration
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_temp
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ppm
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ppm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ7_calibration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_calibration
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_get_temp
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[16a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[16b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[16e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[51]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[eb]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[170]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ad_value
</UL>

<P><STRONG><a name="[a4]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[a1]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[9b]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ad_value
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[a3]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[60]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[97]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ad_value
</UL>

<P><STRONG><a name="[a0]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[a2]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[a5]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[62]"></a>ADXL345_INT</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adxl345.o(i.ADXL345_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADXL345_INT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[64]"></a>ADXL345_Init</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, falldetection.o(i.ADXL345_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ADXL345_Init &rArr; ADXL345_RD_Reg &rArr; ADXL_IIC_Read_Byte &rArr; ADXL_IIC_SendNACK &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_Reg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printshow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_WR_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>ADXL345_RD_Reg</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, adxl345.o(i.ADXL345_RD_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ADXL345_RD_Reg &rArr; ADXL_IIC_Read_Byte &rArr; ADXL_IIC_SendNACK &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Wait_Ack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Send_Byte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Read_Byte
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_Init
</UL>

<P><STRONG><a name="[6e]"></a>ADXL345_RD_XYZ</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, adxl345.o(i.ADXL345_RD_XYZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ADXL345_RD_XYZ &rArr; ADXL_IIC_Read_Byte &rArr; ADXL_IIC_SendNACK &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Wait_Ack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Send_Byte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>ADXL345_WR_Reg</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, adxl345.o(i.ADXL345_WR_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADXL345_WR_Reg &rArr; ADXL_IIC_Wait_Ack &rArr; ADXL_IIC_Stop &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Wait_Ack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Send_Byte
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_Init
</UL>

<P><STRONG><a name="[6f]"></a>ADXL_IIC_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iic.o(i.ADXL_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADXL_IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[6b]"></a>ADXL_IIC_Read_Byte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, iic.o(i.ADXL_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADXL_IIC_Read_Byte &rArr; ADXL_IIC_SendNACK &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_IN
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendNACK
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendACK
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_XYZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_Reg
</UL>

<P><STRONG><a name="[74]"></a>ADXL_IIC_SendACK</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, iic.o(i.ADXL_IIC_SendACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADXL_IIC_SendACK &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Read_Byte
</UL>

<P><STRONG><a name="[73]"></a>ADXL_IIC_SendNACK</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, iic.o(i.ADXL_IIC_SendNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADXL_IIC_SendNACK &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Read_Byte
</UL>

<P><STRONG><a name="[69]"></a>ADXL_IIC_Send_Byte</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, iic.o(i.ADXL_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADXL_IIC_Send_Byte &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_XYZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_Reg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_WR_Reg
</UL>

<P><STRONG><a name="[68]"></a>ADXL_IIC_Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, iic.o(i.ADXL_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADXL_IIC_Start &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_XYZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_Reg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_WR_Reg
</UL>

<P><STRONG><a name="[6c]"></a>ADXL_IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, iic.o(i.ADXL_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADXL_IIC_Stop &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Wait_Ack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_XYZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_Reg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_WR_Reg
</UL>

<P><STRONG><a name="[6a]"></a>ADXL_IIC_Wait_Ack</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, iic.o(i.ADXL_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADXL_IIC_Wait_Ack &rArr; ADXL_IIC_Stop &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Stop
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_XYZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_Reg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_WR_Reg
</UL>

<P><STRONG><a name="[70]"></a>ADXL_SDA_IN</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iic.o(i.ADXL_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADXL_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Wait_Ack
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Read_Byte
</UL>

<P><STRONG><a name="[75]"></a>ADXL_SDA_OUT</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iic.o(i.ADXL_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Send_Byte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendNACK
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendACK
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA_ADC_config</STRONG> (Thumb, 132 bytes, Stack size 88 bytes, mq.o(i.DMA_ADC_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA_ADC_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>

<P><STRONG><a name="[9c]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ad_value
</UL>

<P><STRONG><a name="[7b]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC_config
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_config
</UL>

<P><STRONG><a name="[78]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_config
</UL>

<P><STRONG><a name="[79]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_config
</UL>

<P><STRONG><a name="[dd]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ad_value
</UL>

<P><STRONG><a name="[7a]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC_config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_config
</UL>

<P><STRONG><a name="[9d]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ad_value
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>DMA_USART_config</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, port.o(i.DMA_USART_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA_USART_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[7d]"></a>DW1000_EXTI_Configure</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, port.o(i.DW1000_EXTI_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DW1000_EXTI_Configure &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[81]"></a>DW1000_gpio_init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, port.o(i.DW1000_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DW1000_gpio_init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 954 bytes, Stack size 8 bytes, falldetection.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = EXTI1_IRQHandler &rArr; ADXL345_RD_XYZ &rArr; ADXL_IIC_Read_Byte &rArr; ADXL_IIC_SendNACK &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_XYZ
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_Reg
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printshow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_WR_Reg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm_a
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>EXTI_GetITEnStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.EXTI_GetITEnStatus))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
</UL>

<P><STRONG><a name="[84]"></a>EXTI_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm_a
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345_exti
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_EXTI_Configure
</UL>

<P><STRONG><a name="[b2]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[b3]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[63]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_INT
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_port_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_EXTI_Configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_gpio_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_OUT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_IN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_OUT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_SDA_IN
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Init
</UL>

<P><STRONG><a name="[82]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_gpio_init
</UL>

<P><STRONG><a name="[104]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_check
</UL>

<P><STRONG><a name="[71]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Wait_Ack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Send_Byte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Read_Byte
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_reset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_check
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Wait_Ack
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Send_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Read_Byte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_NAck
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Ack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendNACK
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendACK
</UL>

<P><STRONG><a name="[72]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Wait_Ack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Send_Byte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Read_Byte
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_reset
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_check
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Wait_Ack
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Send_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Read_Byte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_NAck
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Ack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendNACK
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendACK
</UL>

<P><STRONG><a name="[83]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_gpio_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi_serial
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi_serial
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>INT_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.INT_callback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[87]"></a>MAX_IIC_Ack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, max_iic.o(i.MAX_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MAX_IIC_Ack &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Read_Byte
</UL>

<P><STRONG><a name="[89]"></a>MAX_IIC_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, max_iic.o(i.MAX_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MAX_IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[8b]"></a>MAX_IIC_NAck</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, max_iic.o(i.MAX_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MAX_IIC_NAck &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Read
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Read_Byte
</UL>

<P><STRONG><a name="[8c]"></a>MAX_IIC_Read_Byte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, max_iic.o(i.MAX_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MAX_IIC_Read_Byte &rArr; MAX_IIC_NAck &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_IN
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_NAck
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_FIFO_ReadBytes
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Read
</UL>

<P><STRONG><a name="[8e]"></a>MAX_IIC_Send_Byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, max_iic.o(i.MAX_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MAX_IIC_Send_Byte &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_FIFO_ReadBytes
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Read
</UL>

<P><STRONG><a name="[8f]"></a>MAX_IIC_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, max_iic.o(i.MAX_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MAX_IIC_Start &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_FIFO_ReadBytes
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Read
</UL>

<P><STRONG><a name="[90]"></a>MAX_IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, max_iic.o(i.MAX_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MAX_IIC_Stop &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_FIFO_ReadBytes
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[91]"></a>MAX_IIC_Wait_Ack</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, max_iic.o(i.MAX_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MAX_IIC_Wait_Ack &rArr; MAX_IIC_Stop &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_IN
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_FIFO_ReadBytes
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Read
</UL>

<P><STRONG><a name="[8d]"></a>MAX_SDA_IN</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, max_iic.o(i.MAX_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MAX_SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Wait_Ack
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Read_Byte
</UL>

<P><STRONG><a name="[88]"></a>MAX_SDA_OUT</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, max_iic.o(i.MAX_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Send_Byte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_NAck
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Ack
</UL>

<P><STRONG><a name="[92]"></a>MQ2_calibration</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, mq.o(i.MQ2_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MQ2_calibration &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ppm
</UL>

<P><STRONG><a name="[95]"></a>MQ7_calibration</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, mq.o(i.MQ7_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MQ7_calibration &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ppm
</UL>

<P><STRONG><a name="[96]"></a>MQ_get_ad_value</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, mq.o(i.MQ_get_ad_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MQ_get_ad_value &rArr; MQ_port_init &rArr; DMA_ADC_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ppm
</UL>

<P><STRONG><a name="[9e]"></a>MQ_get_ppm</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, mq.o(i.MQ_get_ppm))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = MQ_get_ppm &rArr; MQ7_calibration &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ad_value
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ7_calibration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_calibration
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ppm
</UL>

<P><STRONG><a name="[99]"></a>MQ_port_init</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, mq.o(i.MQ_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MQ_port_init &rArr; DMA_ADC_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC_config
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ad_value
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>NVIC_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, port.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[80]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm_a
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345_exti
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_EXTI_Configure
</UL>

<P><STRONG><a name="[a7]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[a8]"></a>OLED_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[ac]"></a>OLED_DrawPoint</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[a9]"></a>OLED_Refresh_Gram</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh_Gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Refresh_Gram &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[ab]"></a>OLED_ShowChar</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[ad]"></a>OLED_ShowString</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>OLED_WR_Byte</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
</UL>

<P><STRONG><a name="[150]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC_config
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_gpio_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_OUT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_SDA_IN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Init
</UL>

<P><STRONG><a name="[8a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Init
</UL>

<P><STRONG><a name="[c8]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[9f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345_exti
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[61]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_peripheral_init
</UL>

<P><STRONG><a name="[ae]"></a>RCC_Configuration</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, port.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[af]"></a>RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[b7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[b8]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[b4]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[b0]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[152]"></a>RCC_LSEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[b6]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[b5]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[154]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[153]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[b1]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[14b]"></a>RTC_AlarmCmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_AlarmCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm_a
</UL>

<P><STRONG><a name="[2f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, rtc_time.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh_Gram
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm_a
</UL>

<P><STRONG><a name="[c0]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[c1]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[bc]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtime
</UL>

<P><STRONG><a name="[b9]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtime
</UL>

<P><STRONG><a name="[14d]"></a>RTC_ITConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm_a
</UL>

<P><STRONG><a name="[bf]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[151]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[c2]"></a>RTC_SetAlarm</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm_a
</UL>

<P><STRONG><a name="[c4]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
</UL>

<P><STRONG><a name="[c6]"></a>RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
</UL>

<P><STRONG><a name="[c5]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[155]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[156]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_rate_low
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_rate_high
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_peripheral_init
</UL>

<P><STRONG><a name="[c7]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_peripheral_init
</UL>

<P><STRONG><a name="[15a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_peripheral_init
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345_exti
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_EXTI_Configure
</UL>

<P><STRONG><a name="[ca]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[c9]"></a>SysTick_Configuration</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, port.o(i.SysTick_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Configuration &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM2_IRQHandler</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TIM2_IRQHandler &rArr; ADXL345_WR_Reg &rArr; ADXL_IIC_Wait_Ack &rArr; ADXL_IIC_Stop &rArr; ADXL_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printshow
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_WR_Reg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM3_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, tx_main.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TIM3_IRQHandler &rArr; tag_send_poll &rArr; dwt_rxenable &rArr; dwt_forcetrxoff &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddis_to_anthor0
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>TIM3_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tx_main.o(i.TIM3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM3_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[cd]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[d3]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[d5]"></a>Tim2_init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, timer.o(i.Tim2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Tim2_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>USART1_Config</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, port.o(i.USART1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART1_Config &rArr; DMA_USART_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_USART_config
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[2c]"></a>USART1_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, port.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[db]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[da]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[dc]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[d7]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[131]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[173]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printshow
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_temp
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ppm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_continue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[175]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e0]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[176]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[158]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_temp
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ppm
</UL>

<P><STRONG><a name="[177]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[178]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ec]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[93]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ppm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ7_calibration
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ2_calibration
</UL>

<P><STRONG><a name="[e9]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e3]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e1]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e7]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e4]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[179]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[17a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[17b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e2]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[ed]"></a>_dwt_aonarrayupload</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(i._dwt_aonarrayupload))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _dwt_aonarrayupload &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
</UL>

<P><STRONG><a name="[ef]"></a>_dwt_configlde</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, deca_device.o(i._dwt_configlde))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
</UL>

<P><STRONG><a name="[f1]"></a>_dwt_disablesequencing</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, deca_device.o(i._dwt_disablesequencing))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _dwt_disablesequencing &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
</UL>

<P><STRONG><a name="[f2]"></a>_dwt_enableclocks</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, deca_device.o(i._dwt_enableclocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _dwt_enableclocks &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
</UL>

<P><STRONG><a name="[f5]"></a>_dwt_loaducodefromrom</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, deca_device.o(i._dwt_loaducodefromrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _dwt_loaducodefromrom &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[f7]"></a>_dwt_otpread</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, deca_device.o(i._dwt_otpread))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _dwt_otpread &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[fd]"></a>adxl345_exti</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adxl345.o(i.adxl345_exti))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adxl345_exti &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>buzzer_check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, buzzer.o(i.buzzer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = buzzer_check &rArr; show_temp &rArr; ds18b20_get_temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_temp
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[f6]"></a>deca_sleep</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, deca_sleep.o(i.deca_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deca_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGetTickCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
</UL>

<P><STRONG><a name="[11e]"></a>decamutexoff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, deca_mutex.o(i.decamutexoff))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi_serial
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi_serial
</UL>

<P><STRONG><a name="[101]"></a>decamutexon</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, deca_mutex.o(i.decamutexon))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITEnStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi_serial
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi_serial
</UL>

<P><STRONG><a name="[6d]"></a>delay_us</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Wait_Ack
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Stop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Send_Byte
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Read_Byte
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_RD_Reg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_WR_Reg
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_reset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_check
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Wait_Ack
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Send_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Read_Byte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_NAck
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Ack
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendNACK
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_SendACK
</UL>

<P><STRONG><a name="[103]"></a>ds18b20_check</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ds18b20.o(i.ds18b20_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ds18b20_check &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_readtemp_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_conversion
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_port_init
</UL>

<P><STRONG><a name="[105]"></a>ds18b20_conversion</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ds18b20.o(i.ds18b20_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ds18b20_conversion &rArr; write_byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_reset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_check
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_get_temp
</UL>

<P><STRONG><a name="[108]"></a>ds18b20_get_temp</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, ds18b20.o(i.ds18b20_get_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ds18b20_get_temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_readtemp_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_conversion
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_temp
</UL>

<P><STRONG><a name="[10b]"></a>ds18b20_port_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ds18b20.o(i.ds18b20_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ds18b20_port_init &rArr; ds18b20_reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_reset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_check
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>ds18b20_readtemp_cmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ds18b20.o(i.ds18b20_readtemp_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ds18b20_readtemp_cmd &rArr; write_byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_reset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_check
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_get_temp
</UL>

<P><STRONG><a name="[106]"></a>ds18b20_reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ds18b20.o(i.ds18b20_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ds18b20_reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_readtemp_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_conversion
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_port_init
</UL>

<P><STRONG><a name="[10c]"></a>dw1000_config</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dw1000.o(i.dw1000_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dw1000_config &rArr; dwt_configure &rArr; _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setaddress16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_pa
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_SetTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>dw1000_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dw1000.o(i.dw1000_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dw1000_init &rArr; dwt_initialise &rArr; _dwt_otpread &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_rate_low
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_spi_rate_high
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>dw1000_msg_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dw1000.o(i.dw1000_msg_init))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>dwt_SetTxPower</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dw1000.o(i.dwt_SetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_SetTxPower &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[10d]"></a>dwt_configure</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, deca_device.o(i.dwt_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dwt_configure &rArr; _dwt_configlde &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[11b]"></a>dwt_configuretxrf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, deca_device.o(i.dwt_configuretxrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_configuretxrf &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_SetTxPower
</UL>

<P><STRONG><a name="[114]"></a>dwt_enable_pa</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dw1000.o(i.dwt_enable_pa))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_enable_pa &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[11c]"></a>dwt_enableframefilter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, deca_device.o(i.dwt_enableframefilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_enableframefilter &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
</UL>

<P><STRONG><a name="[cf]"></a>dwt_forcetrxoff</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, deca_device.o(i.dwt_forcetrxoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_forcetrxoff &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>dwt_initialise</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, deca_device.o(i.dwt_initialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dwt_initialise &rArr; _dwt_otpread &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setxtaltrim
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_init
</UL>

<P><STRONG><a name="[122]"></a>dwt_read16bitoffsetreg</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, deca_device.o(i.dwt_read16bitoffsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_read16bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[f8]"></a>dwt_read32bitoffsetreg</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, deca_device.o(i.dwt_read32bitoffsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readsystimestamphi32
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddis_to_anthor0
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_pa
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_SetTxPower
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readdevid
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
</UL>

<P><STRONG><a name="[123]"></a>dwt_read8bitoffsetreg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, deca_device.o(i.dwt_read8bitoffsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_read8bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
</UL>

<P><STRONG><a name="[11f]"></a>dwt_readdevid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(i.dwt_readdevid))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_readdevid &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[f3]"></a>dwt_readfromdevice</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, deca_device.o(i.dwt_readfromdevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readfromspi_serial
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>

<P><STRONG><a name="[125]"></a>dwt_readrxdata</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, deca_device.o(i.dwt_readrxdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_readrxdata &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
</UL>

<P><STRONG><a name="[126]"></a>dwt_readrxtimestamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(i.dwt_readrxtimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwt_readrxtimestamp &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_timestamp_u64
</UL>

<P><STRONG><a name="[127]"></a>dwt_readsystimestamphi32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deca_device.o(i.dwt_readsystimestamphi32))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_readsystimestamphi32 &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
</UL>

<P><STRONG><a name="[128]"></a>dwt_readtxtimestamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(i.dwt_readtxtimestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dwt_readtxtimestamp &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_timestamp_u64
</UL>

<P><STRONG><a name="[129]"></a>dwt_rxenable</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, deca_device.o(i.dwt_rxenable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dwt_rxenable &rArr; dwt_forcetrxoff &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
</UL>

<P><STRONG><a name="[12a]"></a>dwt_rxreset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, deca_device.o(i.dwt_rxreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_rxreset &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
</UL>

<P><STRONG><a name="[111]"></a>dwt_setaddress16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(i.dwt_setaddress16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setaddress16 &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[12b]"></a>dwt_setdelayedtrxtime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(i.dwt_setdelayedtrxtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setdelayedtrxtime &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
</UL>

<P><STRONG><a name="[115]"></a>dwt_setinterrupt</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, deca_device.o(i.dwt_setinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dwt_setinterrupt &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[10e]"></a>dwt_setleds</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, deca_device.o(i.dwt_setleds))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_setleds &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[110]"></a>dwt_setpanid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(i.dwt_setpanid))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setpanid &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[112]"></a>dwt_setrxantennadelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, deca_device.o(i.dwt_setrxantennadelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_setrxantennadelay &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[12c]"></a>dwt_setrxtimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, deca_device.o(i.dwt_setrxtimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_setrxtimeout &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
</UL>

<P><STRONG><a name="[113]"></a>dwt_settxantennadelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, deca_device.o(i.dwt_settxantennadelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_settxantennadelay &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
</UL>

<P><STRONG><a name="[121]"></a>dwt_setxtaltrim</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, deca_device.o(i.dwt_setxtaltrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_setxtaltrim &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[120]"></a>dwt_softreset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, deca_device.o(i.dwt_softreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dwt_softreset &rArr; _dwt_disablesequencing &rArr; dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonarrayupload
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
</UL>

<P><STRONG><a name="[12d]"></a>dwt_starttx</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, deca_device.o(i.dwt_starttx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_starttx &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read16bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddis_to_anthor0
</UL>

<P><STRONG><a name="[11d]"></a>dwt_syncrxbufptrs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, deca_device.o(i.dwt_syncrxbufptrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dwt_syncrxbufptrs &rArr; dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read8bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
</UL>

<P><STRONG><a name="[f0]"></a>dwt_write16bitoffsetreg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, deca_device.o(i.dwt_write16bitoffsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_write16bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_settxantennadelay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxantennadelay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setpanid
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setaddress16
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_pa
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_loaducodefromrom
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_disablesequencing
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
</UL>

<P><STRONG><a name="[11a]"></a>dwt_write32bitoffsetreg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, deca_device.o(i.dwt_write32bitoffsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddis_to_anthor0
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setleds
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setinterrupt
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enable_pa
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_SetTxPower
</UL>

<P><STRONG><a name="[ee]"></a>dwt_write8bitoffsetreg</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, deca_device.o(i.dwt_write8bitoffsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dwt_write8bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxreset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_forcetrxoff
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_initialise
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configuretxrf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_configure
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_syncrxbufptrs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_softreset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setxtaltrim
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_otpread
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_configlde
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_aonarrayupload
</UL>

<P><STRONG><a name="[f4]"></a>dwt_writetodevice</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, deca_device.o(i.dwt_writetodevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writetospi_serial
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write16bitoffsetreg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write8bitoffsetreg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dwt_enableclocks
</UL>

<P><STRONG><a name="[12f]"></a>dwt_writetxdata</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, deca_device.o(i.dwt_writetxdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dwt_writetxdata &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddis_to_anthor0
</UL>

<P><STRONG><a name="[130]"></a>dwt_writetxfctrl</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, deca_device.o(i.dwt_writetxfctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dwt_writetxfctrl &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senddis_to_anthor0
</UL>

<P><STRONG><a name="[e6]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15d]"></a>filter</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, filter.o(i.filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = filter
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
</UL>

<P><STRONG><a name="[15e]"></a>final_msg_set_ts</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dwm1000_timestamp.o(i.final_msg_set_ts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = final_msg_set_ts
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
</UL>

<P><STRONG><a name="[46]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, port.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[132]"></a>get_rx_timestamp_u64</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dwm1000_timestamp.o(i.get_rx_timestamp_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_rx_timestamp_u64 &rArr; dwt_readrxtimestamp &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxtimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_rx_main
</UL>

<P><STRONG><a name="[133]"></a>get_status</STRONG> (Thumb, 882 bytes, Stack size 8 bytes, falldetection.o(i.get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[134]"></a>get_tx_timestamp_u64</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dwm1000_timestamp.o(i.get_tx_timestamp_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_tx_timestamp_u64 &rArr; dwt_readtxtimestamp &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readtxtimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_send_poll
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = main &rArr; tx_main &rArr; max30102_test &rArr; maxim_heart_rate_and_oxygen_saturation &rArr; maxim_find_peaks &rArr; maxim_remove_close_peaks &rArr; maxim_sort_indices_descend
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DW1000
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_msg_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_config
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_port_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl345_exti
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_port_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13b]"></a>max30102_Bus_Read</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, max30102.o(i.max30102_Bus_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = max30102_Bus_Read &rArr; MAX_IIC_Read_Byte &rArr; MAX_IIC_NAck &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Wait_Ack
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Send_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Read_Byte
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_NAck
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_FIFO_ReadBytes
</UL>

<P><STRONG><a name="[13c]"></a>max30102_Bus_Write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, max30102.o(i.max30102_Bus_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = max30102_Bus_Write &rArr; MAX_IIC_Wait_Ack &rArr; MAX_IIC_Stop &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Wait_Ack
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_reset
</UL>

<P><STRONG><a name="[13d]"></a>max30102_FIFO_ReadBytes</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, max30102.o(i.max30102_FIFO_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = max30102_FIFO_ReadBytes &rArr; max30102_Bus_Read &rArr; MAX_IIC_Read_Byte &rArr; MAX_IIC_NAck &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Wait_Ack
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Send_Byte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_test
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_continue
</UL>

<P><STRONG><a name="[13e]"></a>max30102_continue</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, max30102.o(i.max30102_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = max30102_continue &rArr; maxim_heart_rate_and_oxygen_saturation &rArr; maxim_find_peaks &rArr; maxim_remove_close_peaks &rArr; maxim_sort_indices_descend
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_FIFO_ReadBytes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_heart_rate_and_oxygen_saturation
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[140]"></a>max30102_gpio_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, max30102.o(i.max30102_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = max30102_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[137]"></a>max30102_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, max30102.o(i.max30102_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = max30102_init &rArr; max30102_reset &rArr; max30102_Bus_Write &rArr; MAX_IIC_Wait_Ack &rArr; MAX_IIC_Stop &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>max30102_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, max30102.o(i.max30102_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = max30102_reset &rArr; max30102_Bus_Write &rArr; MAX_IIC_Wait_Ack &rArr; MAX_IIC_Stop &rArr; MAX_SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_Bus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_init
</UL>

<P><STRONG><a name="[142]"></a>max30102_test</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, max30102.o(i.max30102_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = max30102_test &rArr; maxim_heart_rate_and_oxygen_saturation &rArr; maxim_find_peaks &rArr; maxim_remove_close_peaks &rArr; maxim_sort_indices_descend
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_FIFO_ReadBytes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_heart_rate_and_oxygen_saturation
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[143]"></a>maxim_find_peaks</STRONG> (Thumb, 66 bytes, Stack size 36 bytes, algorithm.o(i.maxim_find_peaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = maxim_find_peaks &rArr; maxim_remove_close_peaks &rArr; maxim_sort_indices_descend
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_remove_close_peaks
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_peaks_above_min_height
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[13f]"></a>maxim_heart_rate_and_oxygen_saturation</STRONG> (Thumb, 1270 bytes, Stack size 332 bytes, algorithm.o(i.maxim_heart_rate_and_oxygen_saturation))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = maxim_heart_rate_and_oxygen_saturation &rArr; maxim_find_peaks &rArr; maxim_remove_close_peaks &rArr; maxim_sort_indices_descend
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_sort_ascend
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_find_peaks
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_test
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_continue
</UL>

<P><STRONG><a name="[144]"></a>maxim_peaks_above_min_height</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, algorithm.o(i.maxim_peaks_above_min_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = maxim_peaks_above_min_height
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_find_peaks
</UL>

<P><STRONG><a name="[145]"></a>maxim_remove_close_peaks</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, algorithm.o(i.maxim_remove_close_peaks))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = maxim_remove_close_peaks &rArr; maxim_sort_indices_descend
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_sort_indices_descend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_sort_ascend
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_find_peaks
</UL>

<P><STRONG><a name="[146]"></a>maxim_sort_ascend</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, algorithm.o(i.maxim_sort_ascend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = maxim_sort_ascend
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_remove_close_peaks
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[147]"></a>maxim_sort_indices_descend</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, algorithm.o(i.maxim_sort_indices_descend))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = maxim_sort_indices_descend
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_remove_close_peaks
</UL>

<P><STRONG><a name="[135]"></a>peripherals_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(i.peripherals_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = peripherals_init &rArr; USART1_Config &rArr; DMA_USART_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_INT
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_peripheral_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DW1000_EXTI_Configure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_gpio_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAX_IIC_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL_IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>portGetTickCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(i.portGetTickCnt))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>

<P><STRONG><a name="[67]"></a>printshow</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, falldetection.o(i.printshow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printshow &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL345_Init
</UL>

<P><STRONG><a name="[149]"></a>read_bit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ds18b20.o(i.read_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = read_bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte
</UL>

<P><STRONG><a name="[10a]"></a>read_byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ds18b20.o(i.read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_byte &rArr; read_bit &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_get_temp
</UL>

<P><STRONG><a name="[124]"></a>readfromspi_serial</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, deca_spi.o(i.readfromspi_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readfromdevice
</UL>

<P><STRONG><a name="[138]"></a>reset_DW1000</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, port.o(i.reset_DW1000))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = reset_DW1000 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>rtc_set_alarm_a</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, rtc_time.o(i.rtc_set_alarm_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtc_set_alarm_a &rArr; RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[14e]"></a>rtc_set_date</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtc_time.o(i.rtc_set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtc_set_date &rArr; RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[14f]"></a>rtc_set_time</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtc_time.o(i.rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtc_set_time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_init
</UL>

<P><STRONG><a name="[136]"></a>rtc_time_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rtc_time.o(i.rtc_time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtc_time_init &rArr; rtc_set_time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_date
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deca_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>senddis_to_anthor0</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, tx_main.o(i.senddis_to_anthor0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = senddis_to_anthor0 &rArr; dwt_writetxfctrl &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>set_spi_rate_high</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.set_spi_rate_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_spi_rate_high
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_init
</UL>

<P><STRONG><a name="[117]"></a>set_spi_rate_low</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.set_spi_rate_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_spi_rate_low
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw1000_init
</UL>

<P><STRONG><a name="[157]"></a>show_ppm</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mq.o(i.show_ppm))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = show_ppm &rArr; MQ_get_ppm &rArr; MQ7_calibration &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_get_ppm
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[ff]"></a>show_temp</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ds18b20.o(i.show_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = show_temp &rArr; ds18b20_get_temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_get_temp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_check
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[159]"></a>showtime</STRONG> (Thumb, 84 bytes, Stack size 120 bytes, rtc_time.o(i.showtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = showtime &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_main
</UL>

<P><STRONG><a name="[148]"></a>spi_peripheral_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, port.o(i.spi_peripheral_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_peripheral_init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripherals_init
</UL>

<P><STRONG><a name="[e5]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[d1]"></a>tag_send_poll</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tx_main.o(i.tag_send_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tag_send_poll &rArr; dwt_rxenable &rArr; dwt_forcetrxoff &rArr; dwt_read32bitoffsetreg &rArr; dwt_readfromdevice &rArr; readfromspi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setrxtimeout
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxenable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tx_timestamp_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>tx_main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tx_main.o(i.tx_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tx_main &rArr; max30102_test &rArr; maxim_heart_rate_and_oxygen_saturation &rArr; maxim_find_peaks &rArr; maxim_remove_close_peaks &rArr; maxim_sort_indices_descend
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_temp
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ppm
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_alarm_a
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_test
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max30102_continue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_check
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>tx_rx_main</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, tx_main.o(i.tx_rx_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tx_rx_main &rArr; dwt_writetxfctrl &rArr; dwt_write32bitoffsetreg &rArr; dwt_writetodevice &rArr; writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxfctrl
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetxdata
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_starttx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_setdelayedtrxtime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_rxreset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readsystimestamphi32
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_readrxdata
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_enableframefilter
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_write32bitoffsetreg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_read32bitoffsetreg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_timestamp_u64
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_msg_set_ts
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_main.o(i.tx_main)
</UL>
<P><STRONG><a name="[107]"></a>write_byte</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ds18b20.o(i.write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = write_byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_readtemp_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ds18b20_conversion
</UL>

<P><STRONG><a name="[12e]"></a>writetospi_serial</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, deca_spi.o(i.writetospi_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = writetospi_serial &rArr; decamutexon
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexon
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decamutexoff
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_writetodevice
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bd]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[c3]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[cc]"></a>SetSysClock</STRONG> (Thumb, 216 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cb]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[f9]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[df]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[fb]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fa]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[47]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
